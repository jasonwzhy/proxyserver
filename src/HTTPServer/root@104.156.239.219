from twisted.internet import reactor,ssl
from twisted.web.resource import Resource, NoResource
from twisted.web.server import Site

class Hello(Resource):
	def render_GET(self,request):
		return "<html><h1>Hello welcome!</h1></html>"
class NotFount(Resource):
	def render_GET(self,request):
		return "<h2>Page Not Found</h2>"
class ServerHandle(Resource):
	def getChild(self,name,request):
		print "name is :",name
		print "request is:",request.args
		print "Client IP is:",request.getClientIP()
		if name == '':
			return self
		elif name == 'about':
			return Hello()
		# else:
		# 	return NotFount()
		return Resource.getChild(self,name,request)
	def render_GET(self,request):
		return "<h1>Welcome server!<h1>"
class SSLServerHandle(Resource):
	def getChild(self,name,request):
		print "This is SSL :"
		print "Client IP is:",request.getClientIP()
		if name == "":
			return self
		return Resource.getChild(self,name,request)

class Item(Resource):
	def getChild(self,name,request):
		print "get item id is:",name
		print "request is:",request.args
		print "Client IP is:",request.getClientIP()
		if name =='':
			return ItemErr()
		if name.isdigit():
			return ItemInfo(int(name))
class ItemInfo(Resource):
	def __init__(self,id):
		Resource.__init__(self)
		self.id = id
	def render_GET(self,request):
		return "<html><h3>The Item id is: %s</h3></html>"%self.id

class ItemErr(Resource):
	def render_GET(self,request):
		return "<html>Get Item ID Error</html>"

root = ServerHandle()
root.putChild('item',Item())

root2 = SSLServerHandle()
factory = Site(root)
sslfactory = Site(root2)
reactor.listenTCP(8000,factory)
sslContext = ssl.DefaultOpenSSLContextFactory(
		'/tmp/privkey.pem',
		'/tmp/cacert.pem'
	)
reactor.listenSSL(443,sslfactory,contextFactory = sslContext)

reactor.run()